{"version":3,"sources":["components/SearchBar.tsx","components/SearchResult.tsx","components/SearchResults.tsx","components/Search.tsx","App.tsx","serviceWorker.ts","services/Api.ts","stores/SearchStore.ts","index.tsx"],"names":["SearchBar","_ref","name","onSubmit","_React$useState","React","useState","query","_React$useState2","Object","slicedToArray","values","setValues","react_default","a","createElement","event","preventDefault","TextField","id","label","value","onChange","objectSpread","defineProperty","target","margin","variant","fullWidth","inject","item","Fragment","doc_id","text","higlight","parts","split","RegExp","concat","map","part","i","key","style","toLowerCase","fontWeight","color","fontSize","getHighlightedText","SearchResultsStyled","styled","section","_templateObject","SearchResults","items","title","results","components_SearchResult","_id","className","Search_templateObject","observer","api","searchStore","_ref2","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","search","sent","setResults","stop","_x","apply","this","arguments","Search_SearchResultsStyled","Bold_Paragrphs","Regular_Paragraphs","App","dir","components_Search","Boolean","window","location","hostname","match","Api","axios","get","headers","Content-Type","data","console","warn","t0","SearchStore","observable","action","stores","jss","create","plugins","toConsumableArray","jssPreset","rtl","theme","createMuiTheme","direction","ReactDOM","render","mobx_react_module","StylesProvider","ThemeProvider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea789b75.chunk.js","sourcesContent":["import React, {SyntheticEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ninterface State {\n    query: string;\n}\n\nexport default function SearchBar({onSubmit}:any): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null {\n\n    const [values, setValues] = React.useState<State>({\n        query: '',\n    });\n\n    const handleChange = (name: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValues({ ...values, [name]: event.target.value });\n    };\n\n    return (\n        <form onSubmit={(event:SyntheticEvent)=>{\n            onSubmit(values.query);\n            event.preventDefault();\n            return false;\n        }}>\n            <TextField\n                id=\"outlined-name\"\n                label=\"חיפוש\"\n                value={values.query}\n                onChange={handleChange('query')}\n                margin=\"normal\"\n                variant=\"outlined\"\n                fullWidth\n            />\n        </form>\n    );\n}\n\n\n","import React from \"react\";\nimport {inject} from \"mobx-react\";\n\nfunction SearchResult({item,query}: any): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null {\n\n    const getHighlightedText = (text: string, higlight: string) => {\n        let parts = text.split(new RegExp(`(${higlight})`, 'gi'));\n        return <span> {parts.map((part, i) =>\n                    <span key={i} style={part.toLowerCase() === higlight.toLowerCase() ? {fontWeight: 'bold',color:'#e10e0e',fontSize:17} : {}}>{part}</span>)\n        } </span>;\n    };\n\n    return (\n        <>\n            <h3>{item.doc_id}</h3>\n            <p>{getHighlightedText(item.text,query)}</p>\n        </>\n    )\n}\n\nexport default inject('searchStore')(SearchResult);\n","import React from \"react\";\nimport SearchResult from \"./SearchResult\";\nimport styled from \"styled-components\";\n\nconst SearchResultsStyled = styled.section`\n p.title{\nfont-size: 26px;\n    text-decoration: underline;\n        color: #0a92d0;\n    font-weight: bold;\n}\n\n\np{\nmargin-bottom: 5px;\n    margin-top: 0;\n}\nh3{\nmargin-bottom: 3px;\nfont-size: 17px;\n}\n`;\n\nexport default function SearchResults({items,query,title}: any): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null {\n    const results = items.map((item:any)=>(<SearchResult\n        key={item._id}\n        item={item}\n        query={query}/>));\n    return (\n        <SearchResultsStyled>\n            <p className={'title'}>{title}:</p>\n            {results}\n        </SearchResultsStyled>\n    )\n}\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\nimport {inject, observer} from \"mobx-react\";\nimport styled from \"styled-components\";\n\nconst SearchResultsStyled = styled.section`\nmax-width: 900px;\nmargin: 0 auto;\n\n`;\n\nfunction Search({api, searchStore}: any): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null {\n\n    const onSubmit = async (query: string) => {\n        api.query = query;\n        const response = await api.search(query);\n        searchStore.setResults(response);\n    };\n\n    return (\n        <SearchResultsStyled>\n            <SearchBar onSubmit={onSubmit}/>\n            {\n                searchStore.results.Bold_Paragrphs &&\n                <SearchResults\n                    items={searchStore.results.Bold_Paragrphs}\n                    query={api.query}\n                    title={'פסקאות מודגשות'}\n                />\n            }\n            {\n                searchStore.results.Regular_Paragraphs &&\n                <SearchResults\n                    items={searchStore.results.Regular_Paragraphs}\n                    query={api.query}\n                    title={'פסקאות רגילות'}\n                />\n            }\n        </SearchResultsStyled>\n    )\n}\n\nexport default inject('api', 'searchStore')(observer(Search));\n","import React from 'react';\nimport './App.scss';\nimport Search from \"./components/Search\";\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\" dir={'rtl'}>\n            <Search/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nclass Api {\n    async search(query:string){\n        try {\n\n            const {data} = await axios.get(`http://videos.jewishnature.co.il/ApI/Json/Search/${query}/Exact/true`, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n                }\n            });\n\n            return data;\n        } catch (e) {\n            console.warn('Error: api.search()', e);\n        }\n    }\n}\n\nexport default Api;\n","import {action, observable} from \"mobx\";\n\nclass SearchStore {\n\n    @observable query = '';\n\n    @observable results = [];\n\n    @action setResults(results: []) {\n        this.results = results;\n    }\n}\n\nexport default SearchStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport Api from \"./services/Api\";\nimport {jssPreset, StylesProvider, ThemeProvider} from \"@material-ui/styles\";\nimport {create} from 'jss';\nimport rtl from \"jss-rtl\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport SearchStore from \"./stores/SearchStore\";\n\nconst api = new Api();\nconst searchStore = new SearchStore();\nconst stores = {\n    api,\n    searchStore,\n};\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\nconst theme = createMuiTheme({\n    direction: 'rtl',\n});\n\nReactDOM.render(\n    <Provider {...stores}>\n        <StylesProvider jss={jss}>\n            <ThemeProvider theme={theme}>\n                <App/>\n            </ThemeProvider>\n        </StylesProvider>\n\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}